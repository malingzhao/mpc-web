/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "mpc_bridge.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    int from;
    int to;
    char* data;
    int data_len;
} MPCMessage;

typedef struct {
    MPCMessage* messages;
    int count;
} MPCMessageArray;

typedef struct {
    char* r_str;
    char* s_str;
    int error_code;
} SignatureResult;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int go_keygen_init(GoInt curve, GoInt partyID, GoInt threshold, GoInt totalParties, void** handle);
extern int go_keygen_round1(void* handle, char** outData, int* outLen);
extern int go_keygen_round2(void* handle, char* inData, int inLen, char** outData, int* outLen);
extern int go_keygen_round3(void* handle, char* inData, int inLen, char** keyData, int* keyLen);
extern void go_keygen_destroy(void* handle);
extern int go_refresh_init(GoInt curve, GoInt partyID, GoInt threshold, int* devoteList, int devoteCount, char* keyData, int keyLen, void** handle);
extern int go_refresh_round1(void* handle, char** outData, int* outLen);
extern int go_refresh_round2(void* handle, char* inData, int inLen, char** outData, int* outLen);
extern int go_refresh_round3(void* handle, char* inData, int inLen, char** keyData, int* keyLen);
extern void go_refresh_destroy(void* handle);
extern int go_ecdsa_sign_init_p1_complex(int partyID, int peerID, char* keyData, int keyLen, char* message, int messageLen, void** handle);
extern int go_ecdsa_sign_init_p2_complex(int partyID, int peerID, char* keyData, int keyLen, char* message, int messageLen, void** handle);
extern int go_ecdsa_sign_step1(void* handle, char** commitData, int* commitLen);
extern int go_ecdsa_sign_p2_step1(void* handle, char* commitData, int commitLen, char** proofData, int* proofLen, char** r2Data, int* r2Len);
extern int go_ecdsa_sign_p1_step2(void* handle, char* proofData, int proofLen, char* r2Data, int r2Len, char** p1ProofData, int* p1ProofLen, char** cmtDData, int* cmtDLen);
extern int go_ecdsa_sign_p2_step2(void* handle, char* cmtDData, int cmtDLen, char* p1ProofData, int p1ProofLen, char** ekData, int* ekLen, char** affineProofData, int* affineProofLen);
extern int go_ecdsa_sign_p1_step3(void* handle, char* ekData, int ekLen, char* affineProofData, int affineProofLen, char** rData, int* rLen, char** sData, int* sLen);
extern void go_ecdsa_sign_destroy(void* handle);
extern int go_ed25519_sign_init(int party_id, int threshold, int* part_list, int part_count, char* key_data, int key_len, char* message, int message_len, void** handle);
extern int go_ed25519_sign_round1(void* handle, char** out_data, int* out_len);
extern int go_ed25519_sign_round2(void* handle, char* in_data, int in_len, char** out_data, int* out_len);
extern int go_ed25519_sign_round3(void* handle, char* in_data, int in_len, char** sig_r, char** sig_s);
extern void go_ed25519_sign_destroy(void* handle);
extern char* mpc_string_alloc(char* src);
extern void mpc_string_free(char* str);
extern void* mpc_message_array_alloc(int count);
extern void mpc_message_array_free(void* messages);
extern char* mpc_get_error_string(int error_code);
extern int go_ecdsa_keygen_generate_p2_params(char** out_data, int* out_len);
extern int go_ecdsa_keygen_p1(char* key_data, int key_len, int peer_id, char* p2_params, int p2_params_len, char** out_data, int* out_len, char** message_data, int* message_len);
extern int go_ecdsa_keygen_p2(char* key_data, int key_len, int p1_id, char* p1_message, int p1_msg_len, char* p2_params, int p2_params_len, char** out_data, int* out_len);

#ifdef __cplusplus
}
#endif
